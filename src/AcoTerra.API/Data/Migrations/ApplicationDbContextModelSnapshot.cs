// <auto-generated />
using System;
using AcoTerra.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcoTerra.API.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Actors.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identification_number");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identification_type");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.Freight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("destination");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("origin");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT")
                        .HasColumnName("remarks");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_price");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL")
                        .HasColumnName("total_quantity");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_freight");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_freight_employee_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_freight_vehicle_id");

                    b.ToTable("freight", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("FreightId")
                        .HasColumnType("TEXT")
                        .HasColumnName("freight_id");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_shipments");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_shipments_customer_id");

                    b.HasIndex("FreightId")
                        .HasDatabaseName("ix_shipments_freight_id");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.ShipmentProducer", b =>
                {
                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("shipment_id");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("producer_id");

                    b.HasKey("ShipmentId", "ProducerId")
                        .HasName("pk_shipments_producers");

                    b.HasIndex("ProducerId")
                        .HasDatabaseName("ix_shipments_producers_producer_id");

                    b.ToTable("shipments_producers", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.ShipmentProduct", b =>
                {
                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("shipment_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.HasKey("ShipmentId", "ProductId")
                        .HasName("pk_shipments_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_shipments_products_product_id");

                    b.ToTable("shipments_products", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.LegalDocuments.LegalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("actor_id");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("document");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_legal_documents");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("ix_legal_documents_actor_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_legal_documents_vehicle_id");

                    b.ToTable("legal_documents", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("PricePerPackage")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_per_package");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Trucks.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<double>("Capacity")
                        .HasColumnType("REAL")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("license_plate");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("TEXT")
                        .HasColumnName("truck_id");

                    b.HasKey("Id")
                        .HasName("pk_trailers");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasDatabaseName("ix_trailers_truck_id");

                    b.ToTable("trailers", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.AdditionalEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("condition");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_additional_equipment");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_additional_equipment_vehicle_id");

                    b.ToTable("additional_equipment", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.FinancialInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Financed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("financed");

                    b.Property<int>("Installments")
                        .HasColumnType("INTEGER")
                        .HasColumnName("installments");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("TEXT")
                        .HasColumnName("outstanding_balance");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("purchase_price");

                    b.HasKey("Id")
                        .HasName("pk_financial_information");

                    b.ToTable("financial_information", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.MaintenanceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT")
                        .HasColumnName("document");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Tires")
                        .HasColumnType("TEXT")
                        .HasColumnName("tires");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_maintenance_history");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_maintenance_history_vehicle_id");

                    b.ToTable("maintenance_history", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.TechnicalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<double>("AverageConsumption")
                        .HasColumnType("REAL")
                        .HasColumnName("average_consumption");

                    b.Property<double>("CurrentMileage")
                        .HasColumnType("REAL")
                        .HasColumnName("current_mileage");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<double>("TankSize")
                        .HasColumnType("REAL")
                        .HasColumnName("tank_size");

                    b.HasKey("Id")
                        .HasName("pk_technical_information");

                    b.ToTable("technical_information", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.TrafficFine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_issued");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT")
                        .HasColumnName("document");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<DateOnly?>("PaidAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("paid_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("Violation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("violation");

                    b.HasKey("Id")
                        .HasName("pk_traffic_fines");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_traffic_fines_vehicle_id");

                    b.ToTable("traffic_fines", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("brand");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("chassis_number");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("engine_number");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("license_plate");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("manufacturing_year");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Customers.Customer", b =>
                {
                    b.HasBaseType("AcoTerra.API.Data.Entities.Actors.Actor");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Employees.Employee", b =>
                {
                    b.HasBaseType("AcoTerra.API.Data.Entities.Actors.Actor");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EmergencyContacts")
                        .HasColumnType("TEXT")
                        .HasColumnName("emergency_contacts");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("employment_status");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Producers.Producer", b =>
                {
                    b.HasBaseType("AcoTerra.API.Data.Entities.Actors.Actor");

                    b.ToTable("producers", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Trucks.Truck", b =>
                {
                    b.HasBaseType("AcoTerra.API.Data.Entities.Vehicles.Vehicle");

                    b.ToTable("trucks", (string)null);
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.Freight", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_freight_employees_employee_id");

                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_freight_vehicle_vehicle_id");

                    b.Navigation("Employee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.Shipment", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_customers_customer_id");

                    b.HasOne("AcoTerra.API.Data.Entities.Freights.Freight", "Freight")
                        .WithMany("Shipments")
                        .HasForeignKey("FreightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_freight_freight_id");

                    b.OwnsOne("AcoTerra.API.Data.Entities.Freights.ValueObjects.Location", "Destination", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("TEXT")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL")
                                .HasColumnName("destination_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL")
                                .HasColumnName("destination_longitude");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId")
                                .HasConstraintName("fk_shipments_shipments_id");
                        });

                    b.OwnsOne("AcoTerra.API.Data.Entities.Freights.ValueObjects.Location", "Origin", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("TEXT")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL")
                                .HasColumnName("origin_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL")
                                .HasColumnName("origin_longitude");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId")
                                .HasConstraintName("fk_shipments_shipments_id");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("Freight");

                    b.Navigation("Origin")
                        .IsRequired();
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.ShipmentProducer", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Producers.Producer", null)
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_producers_producer_producer_id");

                    b.HasOne("AcoTerra.API.Data.Entities.Freights.Shipment", null)
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_producers_shipments_shipment_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.ShipmentProduct", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_products_product_product_id");

                    b.HasOne("AcoTerra.API.Data.Entities.Freights.Shipment", null)
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_products_shipments_shipment_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.LegalDocuments.LegalDocument", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Actors.Actor", null)
                        .WithMany("LegalDocuments")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_legal_document_actor_actor_id");

                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithMany("LegalDocuments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_legal_documents_vehicle_vehicle_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Trucks.Trailer", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Trucks.Truck", null)
                        .WithOne("Trailer")
                        .HasForeignKey("AcoTerra.API.Data.Entities.Trucks.Trailer", "TruckId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_trailers_vehicle_truck_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.AdditionalEquipment", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithMany("AdditionalEquipment")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_additional_equipment_vehicle_vehicle_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.FinancialInformation", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithOne("FinancialInformation")
                        .HasForeignKey("AcoTerra.API.Data.Entities.Vehicles.FinancialInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.MaintenanceHistory", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithMany("MaintenanceHistory")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_history_vehicle_vehicle_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.TechnicalInformation", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithOne("TechnicalInformation")
                        .HasForeignKey("AcoTerra.API.Data.Entities.Vehicles.TechnicalInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.TrafficFine", b =>
                {
                    b.HasOne("AcoTerra.API.Data.Entities.Vehicles.Vehicle", null)
                        .WithMany("TrafficFines")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_traffic_fines_vehicle_vehicle_id");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Actors.Actor", b =>
                {
                    b.Navigation("LegalDocuments");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Freights.Freight", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("AdditionalEquipment");

                    b.Navigation("FinancialInformation")
                        .IsRequired();

                    b.Navigation("LegalDocuments");

                    b.Navigation("MaintenanceHistory");

                    b.Navigation("TechnicalInformation")
                        .IsRequired();

                    b.Navigation("TrafficFines");
                });

            modelBuilder.Entity("AcoTerra.API.Data.Entities.Trucks.Truck", b =>
                {
                    b.Navigation("Trailer");
                });
#pragma warning restore 612, 618
        }
    }
}
